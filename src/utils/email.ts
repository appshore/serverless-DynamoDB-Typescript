import { SNS } from 'aws-sdk';

import { crudReturnInter } from '../types/crudInterface';
import { sendInter } from '../types/emailInterface';

import { logError, logSuccess } from '../utils/logs';

// retrieve env vars generated by ssm plus stage context
const { IS_OFFLINE, TopicArn } = process.env;

// Dev note:
// serverless-offline-sns doesn't support to send an email at this stage
// so this function won't work in local.
// Instead of using SNS an alternative is AWS SES (Simple Email Service)
// more appropriate for full feature transactional or marketing emails.

// set sns client according stage context
const sns = new SNS(
  IS_OFFLINE
    ? {
        region: 'localhost',
        endpoint: 'http://localhost:4002', // hardcoded here but we can also set it as a ssm key
      }
    : {}
);

/**
 * Send an email
 * @param subject text subject
 * @param content text content
 */
const send = async ({ Subject, Message }: sendInter): Promise<crudReturnInter> => {
  try {
    const timestamp = new Date().toISOString();

    await sns
      .publish({
        Subject,
        Message,
        TopicArn,
      })
      .promise();

    return logSuccess({
      message: `Email sent at ${timestamp}`,
    });
  } catch (error) {
    return logError(error);
  }
};

export { send };

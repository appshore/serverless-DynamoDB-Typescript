import * as Slack from 'slack-node';

import { crudReturnInter } from '../types/crudInterface';
import { postInter } from '../types/slackInterface';

import { logError, logSuccess } from '../utils/logs';

// retrieve env vars generated by ssm plus stage context
const { SlackAPIToken } = process.env;

/**
 * Post a text on a channel
 * @param channel channel
 * @param text text
 */
const post = async ({ channel, text }: postInter): Promise<crudReturnInter> => {
  try {
    const timestamp = new Date().toISOString();
    const slack = new Slack(SlackAPIToken);

    // We don't use await here due to some issue with TS function overload
    slack.api(
      'chat.postMessage',
      {
        channel,
        text,
      },
      () =>
        logSuccess({
          message: `Slack posted at ${timestamp}`,
        })
    );
  } catch (error) {
    return logError(error);
  }
};

export { post };
